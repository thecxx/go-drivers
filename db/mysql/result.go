package mysql

import (
	"database/sql"
	"errors"
)

type Result struct {
	rows   *sql.Rows
	result sql.Result
}

// Get first row from the set.
func (r Result) Row() (row map[string]string, err error) {
	// If no rows
	if r.rows == nil {
		return nil, nil
	}
	columns, err := r.rows.Columns()
	if err != nil {
		return nil, err
	}
	if len(columns) == 0 {
		return nil, errors.New("no columns found")
	}
	// Init args
	values := make([]sql.RawBytes, len(columns))
	scanArgs := make([]interface{}, len(columns))
	for i := range values {
		scanArgs[i] = &values[i]
	}
	if r.rows.Next() {
		// Scan
		err = r.rows.Scan(scanArgs...)
		if err != nil {
			return nil, err
		}
		row = make(map[string]string)
		for i, value := range values {
			if value == nil {
				row[columns[i]] = ""
			} else {
				row[columns[i]] = string(value)
			}
		}
		r.rows.Close()
	}
	return row, nil
}

// Get all rows from the set.
func (r Result) Rows() (rows []map[string]string, err error) {
	// If no rows
	if r.rows == nil {
		return nil, nil
	}
	columns, err := r.rows.Columns()
	if err != nil {
		return nil, err
	}
	if len(columns) == 0 {
		return nil, errors.New("no columns found")
	}
	// Init args
	values := make([]sql.RawBytes, len(columns))
	scanArgs := make([]interface{}, len(columns))
	for i := range values {
		scanArgs[i] = &values[i]
	}
	for r.rows.Next() {
		// Scan
		err = r.rows.Scan(scanArgs...)
		if err != nil {
			return nil, err
		}
		row := make(map[string]string)
		for i, value := range values {
			if value == nil {
				row[columns[i]] = ""
			} else {
				row[columns[i]] = string(value)
			}
		}
		rows = append(rows, row)
	}
	return rows, nil
}

// Unmarshal all rows to a declared variable.
func (r Result) Unmarshal(rows interface{}) error {
	return errors.New("not implemented")
}

// RowsAffected returns the number of rows affected by an
// update, insert, or delete. Not every database or database
// driver may support this.
func (r Result) RowsAffected() (int64, error) {
	return r.result.RowsAffected()
}

// LastInsertId returns the integer generated by the database
// in response to a command. Typically this will be from an
// "auto increment" column when inserting a new row. Not all
// databases support this feature, and the syntax of such
// statements varies.
func (r Result) LastInsertId() (int64, error) {
	return r.result.LastInsertId()
}
